q
c
n
q
response['items'].map { |item| item['contentDetails'].values.first['uploads'] }
response['items']
response = parse_response(@agent.get(CHANNEL_ENDPOINT, params))
@agent.get(CHANNEL_ENDPOINT, params)
q
playlists(channel_id)
c
url
q
url =~ /\A#{URI::regexp(['http', 'https'])}\z/
Mechanize.new.get url
url
URI.join('http', url).to_s
URI.join('http:', url).to_s
URI.join('http:/', url).to_s
URI.join('http://', url).to_s
url =  URI.join('http', url).to_s
url = target['@'].nil? ? url_from_domain(target) : url_from_user(target)
url =  URI.join('http', url).to_s
page = Mechanize.new.get url
url
q
items.first.save 'item.xml'
items.first
items.size
items = page.search('//item')
page.search '//item'
page.save 'a.xml'
page.xml.search ".//*[@id='feedTitleText']"
page.xml.class.search ".//*[@id='feedTitleText']"
page.xml.class.search .//*[@id='feedTitleText']
page.xml.class
page.xml
page.search ".//*[@id='feedTitleText']"
page
page.body.class
page.body
page.search '//strong'
page
page.search 
page.node
page.first
page.at ENTRIES_PATH
page.at
page.Searchable
page.to_html
page.reader
page.xpath(".//p")
page.class
page
page.search(".//p")
page.search(".//span")
page.search(".//div")
page.search(".//*[@class='entry']")
page.search(ENTRIES_PATH)
page
