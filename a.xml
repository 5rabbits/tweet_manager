<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Javier Segovia on Medium]]></title>
        <description><![CDATA[Stories by Javier Segovia on Medium]]></description>
        <link>https://medium.com/@_jotase?source=rss-64c23a1254a7------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*iQXLw-kaFX6FD6ROjQuISg.jpeg</url>
            <title>Stories by Javier Segovia on Medium</title>
            <link>https://medium.com/@_jotase?source=rss-64c23a1254a7------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Fri, 28 Jul 2017 16:30:04 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@_jotase" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[I developed a bot for this, and I did a little post about it “Cazando bots en Twitter”…]]></title>
            <link>https://medium.com/@_jotase/i-developed-a-bot-for-this-and-i-did-a-little-post-about-it-cazando-bots-en-twitter-1a5de61124ca?source=rss-64c23a1254a7------2</link>
            <guid isPermaLink="false">https://medium.com/p/1a5de61124ca</guid>
            <dc:creator><![CDATA[Javier Segovia]]></dc:creator>
            <pubDate>Sun, 18 Jun 2017 22:22:11 GMT</pubDate>
            <atom:updated>2017-06-18T22:22:11.221Z</atom:updated>
            <content:encoded><![CDATA[<p>I developed a bot for this, and I did a little post about it “Cazando bots en Twitter” @Jota_Segovia https://medium.com/@_jotase/cazando-bots-en-twitter-f173e2315185</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1a5de61124ca" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Si te refieres a los del gobierno, sin herramientas pagas, si te refieres a mi, gracias.]]></title>
            <link>https://medium.com/@_jotase/si-te-refieres-a-los-del-gobierno-sin-herramientas-pagas-si-te-refieres-a-mi-gracias-d4f8415abd60?source=rss-64c23a1254a7------2</link>
            <guid isPermaLink="false">https://medium.com/p/d4f8415abd60</guid>
            <dc:creator><![CDATA[Javier Segovia]]></dc:creator>
            <pubDate>Sat, 10 Jun 2017 00:30:46 GMT</pubDate>
            <atom:updated>2017-06-10T00:30:46.972Z</atom:updated>
            <content:encoded><![CDATA[<p>Si te refieres a los del gobierno, sin herramientas pagas, si te refieres a mi, gracias.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d4f8415abd60" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cazando bots en Twitter]]></title>
            <link>https://medium.com/@_jotase/cazando-bots-en-twitter-f173e2315185?source=rss-64c23a1254a7------2</link>
            <guid isPermaLink="false">https://medium.com/p/f173e2315185</guid>
            <category><![CDATA[python]]></category>
            <category><![CDATA[bots]]></category>
            <category><![CDATA[twitter]]></category>
            <category><![CDATA[politics]]></category>
            <category><![CDATA[venezuela]]></category>
            <dc:creator><![CDATA[Javier Segovia]]></dc:creator>
            <pubDate>Thu, 08 Jun 2017 19:03:19 GMT</pubDate>
            <atom:updated>2017-06-08T19:03:19.698Z</atom:updated>
            <content:encoded><![CDATA[<p>Imagínense vivir en un país en dictadura, donde el dia anterior había sido el <strong>Dia del Trabajador</strong> y el salario mínimo mensual no llega a 50 USD, paralelamente habían<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjuzN-5wdLTAhWBipAKHbLiCEAQqUMIKjAB&amp;url=http%3A%2F%2Fwww.elnuevoherald.com%2Fnoticias%2Fmundo%2Famerica-latina%2Fvenezuela-es%2Farticle147825589.html&amp;usg=AFQjCNGPwgH2m6eH_rCQyci0OcLHop8qZA&amp;sig2=dNafQ8b9hCpHrLBzPl9T4w"> disturbios y manifestaciones</a> en todo el país (porque el país sufre<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=8&amp;ved=0ahUKEwjW5vjGwdLTAhVEQ5AKHcahA60QFghKMAc&amp;url=http%3A%2F%2Fwww.eltiempo.com%2Fnoticias%2Fcrisis-en-venezuela&amp;usg=AFQjCNGffjGkccUKANNdLkaG_Ae8jw3MSA&amp;sig2=VHisGCalKYeFI2FK1fOI9Q&amp;cad=rja"> crisis económicas, sociales, de salud, etc.</a>) siendo reprimidas de forma violenta por el poder que juro proteger al ciudadano, un dia terrible, pues ese es mi país de origen, mi amada Venezuela.</p><p>Para mejorar la situación, el presidente convoca a una <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwi8o4jvwdLTAhVEQ5AKHcahA60QFghCMAU&amp;url=http%3A%2F%2Fwww.el-nacional.com%2Fnoticias%2Fgobierno%2Fmaduro-convoco-una-constituyente-comunal_179943&amp;usg=AFQjCNHBvlVf-h3shtusQ2SDmAipnTsXfw&amp;sig2=8GL5l9W82DffVG2yPzZyoA">“Constituyente Comunal”</a> el cual genera todo tipo de repudio nacional como internacional, aun así al siguiente dia en el <strong>twitter</strong> en medio de protestas y repudios la etiqueta pro-gobierno <strong>#AConstituyentePorLaPaz</strong> se mantiene posicionada, este fenómeno ocurre todos los días, al tener todos los medios censurados en el país, todo es color de rosa, pero muy contrario a la versión de las redes sociales, y al no poder censurarla, tratan de manipularla desvirtuando la opinión publica teniendo <strong>trending topics</strong> pro gobierno, para así tener una prueba de que el “pueblo” (a.k.a <strong>bots</strong>) están con ellos, este es un secreto a voces, muchas personas han demostrado con fotos, videos, etc como operan los bots, pero yo aproveche el fin de semana largo, y me dedique a demostrarlo como mejor lo se hacer, creando <strong>bots</strong> para detectar <strong>bots</strong> :D.</p><p>Cabe destacar que esto no es solamente para analizar los bots del gobierno, hay otros personajes que se dedican también a posicionar etiquetas de formas fraudulentas, sobre todo en las noches, así que parte de lo que mostrare no funcionara contra los <strong>bots</strong> <strong>“chavistas”</strong> porque usan estrategias distintas.</p><p>Así como este post lo hago en español, no lo haré tan técnico como mis posts anteriores, mostrare simplemente los resultados obtenidos al analizar para ser exacto <strong>15563 tweets</strong> con la etiqueta <strong>#AConstituyentePorLaPaz</strong></p><blockquote>Aquellos que son programadores, esto lo hice usando <a href="https://github.com/tweepy/tweepy">https://github.com/tweepy/tweepy,</a> y <a href="http://pandas.pydata.org/">http://pandas.pydata.org/</a>, luego subiré el código fuente</blockquote><p>Para detectar bots me base en varios criterios</p><ul><li>Tweets originales (no retweets) duplicados por distintas cuentas, es muy sospechoso que varias personas piensen igual (aunque eso es parte del modelo socialista, el pensamiento único :D)</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*OBwULKspP4a4WHVEN4Zsfw.png" /></figure><ul><li>Tweets falsos, como les mencione anteriormente, con los otros personajes que posicionan etiquetas, tienen varias cuentas que publican varios tweets con números o palabras aleatorias que no tienen que ver con la etiqueta.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yJ6Oi4pXE-oEZPK_bKp0UQ.png" /></figure><ul><li>Tweets masivos por el mismo usuario, hay varias cuentas que se dedican a twitter y a dar RT masivamente a los tweets con estas etiquetas</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/326/1*Ah8xA47gIFlwJzcuxMIHVw.png" /></figure><ul><li>Tweets provenientes de herramientas de automatización, algo que encontré muy resaltate, era como estos bots operaban mediante el uso de TweetDeck, Botize y IFTTT</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*3bRzCCeW2_XzUrl7MH_qug.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KNOFHpZL1cQS5SRQdr_vSw.png" /></figure><ul><li>Y por ultimo, el mas descarado, RTs hecho masiva y simultáneamente, esta comparación la hice buscando todos los tweets hecho rt al mismo tiempo, es decir, con hora, minuto, segundos y mili-segundos!, sin dejar abierto la posibilidad de margen de error</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*U-ye_kS9ZSgE752Y-SpGwA.png" /></figure><p>En resumen, si bien despreciamos todas las pruebas excepto la ultima de los retweets simultáneos, representa mas del 15% de los tweets, por la densidad de los mismos, posicionan de manera eficaz las etiquetas, el resto de los tweets y menciones si se generan de manera orgánica, ya que algunos las respaldan y otros simplemente la condenan, de ambas formas mantienen la posición de la etiqueta, pero solo necesitaba el primer empujón, gracias al pueblo (bots)!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f173e2315185" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Breaking captchas from scratch (almost)]]></title>
            <link>https://blog.5rabbits.com/breaking-captchas-from-scracth-almost-753895fade8a?source=rss-64c23a1254a7------2</link>
            <guid isPermaLink="false">https://medium.com/p/753895fade8a</guid>
            <category><![CDATA[computer-vision]]></category>
            <category><![CDATA[algorithms]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[artificial-intelligence]]></category>
            <category><![CDATA[ruby]]></category>
            <dc:creator><![CDATA[Javier Segovia]]></dc:creator>
            <pubDate>Tue, 27 Dec 2016 19:31:47 GMT</pubDate>
            <atom:updated>2016-12-29T23:15:18.823Z</atom:updated>
            <content:encoded><![CDATA[<p>Breaking captchas using ImageMagick + Tesseract</p><p>For those who need to automate tasks or just extract data (web scraping) from a site, you may encounter with the old and annoying captchas (because they don’t have a public API we can request gently)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/926/1*xGJi-b6lKC2mIl_89Mfepg.jpeg" /></figure><p>This post is intended to show how to solve this type of captchas (no google recaptchas) using <a href="http://www.imagemagick.org/script/index.php">ImageMagick</a> and <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjt5ryek4jRAhVBhJAKHd6CBB8QFggwMAI&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTesseract&amp;usg=AFQjCNEJVJ7mNPUsqUf9pqzFCaR59Ou5PQ&amp;sig2=lCU8npUH1ZSHtKEb9gtJBQ">Tesseract</a></p><p>If you’re not familiar with Tesseract, it’s an OCR (Optical Character Recognition) created by HP and that’s what we will use it to recognize characters in a image, OCR is not the ultimate solution, because the trainning it’s based on clean images, so to get the best results from tesseract, you have to optimize the images . To achieve that, you should do the following:</p><ol><li><strong>Clean</strong>: Captchas usually will present “noise”, to avoid that a simple OCR will break it and make humans solve it, these noise can be dots, stripes, distortions, etc. so we have to remove every non-alphanumeric content from the image</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*aq2G2quV86nH1yMYUSgs9Q.png" /></figure><p>2. <strong>Binary image: </strong>To help OCR, the image should be optimized, this mean that, pixels have to be black or white, non gray areas (or color area duh), it will be useful to understand characters if only “true positive” pixels exist so features and patterns can be detected.</p><p>3. <strong>Remove blank spaces:</strong> Avoiding processing blank spaces, will improve performance (less pixels to read) and result.</p><p>4. <strong>Configuration: </strong>Tesseract has tons of configuration, but for this task, just few will be useful. <a href="https://github.com/gali8/Tesseract-OCR-iOS/wiki/Advanced-Tesseract-Configuration">https://github.com/gali8/Tesseract-OCR-iOS/wiki/Advanced-Tesseract-Configuration</a></p><p>Now let’s write an example</p><p>This project will be written in ruby, so we’ll need <a href="https://github.com/rmagick/rmagick"><strong>rmagick</strong></a> and <a href="https://github.com/dannnylo/rtesseract"><strong>rtesseract</strong></a><strong> </strong>gems to interact with ImageMagick and Tesseract.</p><p>First, let’s write a class that generate captchas</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ac672311a4995e9ed0b8d2164542744e/href">https://medium.com/media/ac672311a4995e9ed0b8d2164542744e/href</a></iframe><blockquote>This code it’s extracted from <a href="https://github.com/kyledayton/rcaptcha"><strong>rcaptcha,</strong></a><strong> </strong>I edited to add custom image resolution</blockquote><p>To get a captcha, we should write</p><pre>require_relative &#39;captcha&#39;<br>captcha_path = &#39;captcha.jpg&#39;</pre><pre>text = &#39;foobar&#39;<br>width = 400<br>height = 200<br>text_size = 80<br>captcha = Captcha.generate text, width, height, text_size</pre><pre>File.open(captcha_path, &#39;wb&#39;) { |f| f.write(captcha) }</pre><p>This will give us an image like this</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*BjBojWWMJ92PC5S_RmIsLA.jpeg" /></figure><p>FYI, if you send this image to an OCR, you probably get a perfect result, it’s easy to read, but if you combine uppercase and lowercase letter + numbers, you probably not. Anyway, this post it’s to show a way to solve it.</p><p>For testing, we’ll create arandom text for captchas using <a href="https://github.com/stympy/faker"><strong>faker</strong></a></p><pre>...<br>require &#39;faker&#39;</pre><pre>text = Faker::Lorem.characters(6)<br>captcha = Captcha.generate text, width, height, text_size</pre><pre>File.open(captcha_path, &#39;wb&#39;) { |f| f.write(captcha) }</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*u9DOz6E9FENADdARd1yWrg.jpeg" /></figure><p>Now let’s improve the image to extract characters with OCR</p><p>We should understand the captcha, we know that it’s always a center text, with 6 characters with lowercase letters and numbers, characters are blue, and there’re a lot of dots (noise) with different colors, even blue as the characters. So, let first crop the image with the known location</p><pre># Read image<br>img = Magick::Image.read(captcha_path).first<br># args X, Y, width, height<br>img.crop! 50, 60, 300, 80</pre><pre>img.write &#39;captcha_solved.jpg&#39;</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*FKcgmCtQ4UqPERLajU3oVw.jpeg" /></figure><p>then, reduce image size to reduce computation, be careful doing this, because smaller the image, less information you will have, in this case, pixels to read.</p><pre>img.scale! 0.75</pre><p>now, transform image into gray colour scale</p><pre># transform image into gray scale <br>img = img.quantize(128, Magick::GRAYColorspace)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/225/1*KuMU9ajz7v4ODMEGf-9K2Q.jpeg" /></figure><p>we do this to help us clean noise, now we can convert those pixels into white pixels below a threshold we define, in this case I selected 180 pixels (this pixels is based on 256 * 256 colors)</p><pre># convert into white everything below the <br>img = img.white_threshold(180 * 256)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/225/1*Dv8b47KG_EnHkVwQ6D8-CA.jpeg" /></figure><p>Those dots remaining are equal or similar with the character’s colors, but believe it or not, it help us a LOT!, now let’s convert this pixels colors into “binary colors” just 0 or 255.</p><pre># transform image into binary colors<br>img = img.quantize(2, Magick::GRAYColorspace)</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/225/1*5LexGvxZPbCHj4h4KgyGfA.jpeg" /></figure><p>We still got this annoying dots remaining, if you see close, there are white dots or blank spaces inside our characters, because they’re relative small, they can be harmless, but what if they’re bigger? it could be a huge problem because OCR will maybe recognize it as a different character, just imagine a “8” with one of it’s curves erased by an blank spot turn it into a “3” and vice-versa with black dots, or just becoming characters into nothing for the OCR, this is a issue we have to handle. To do that, we can “average” neighbors pixels, converting each pixels into the average value inside a ratio.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/7f0dcbf19064d6f32231a8a946fb32a2/href">https://medium.com/media/7f0dcbf19064d6f32231a8a946fb32a2/href</a></iframe><p>I like to add some blank border to image to clean everything possible in a ratio</p><pre># Add border to avoid noise there<br>img.border!(5, 5, &#39;white&#39;)</pre><p>Because there’re less black dot noises than white spaces, I’ll start cleaning those using a ratio of 2 pixels because, there’re just 1 pixel dots.</p><pre>process img, &#39;white&#39;, 2</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/235/1*JzXUsJqs8cv7BF7fxJM2CA.jpeg" /></figure><p>And then, fill those blank spots inside the characters with bigger a ratio</p><pre>process img, &#39;black&#39;, 3</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/235/1*RcFbjjKRcvo-Du6v2MfffQ.jpeg" /></figure><p>Now let’s try to make the edges soft by using gaussian blur</p><pre># soft edges<br>img = img.gaussian_blur 0.5, 0.5</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/235/1*oFuzDYhN3O6KKZCTX5D4ZA.jpeg" /></figure><p>And lastly, we trim the image to remove blank spaces</p><pre>img.fuzz = 1<br>img.trim!</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/182/1*0eMR4QwrkukG6KsWiOG0Wg.jpeg" /></figure><p>Now we got our image ready to read, remember the tesseract configuration I told you before? well, there’re also some parameters you use when you run tesseract</p><p><a href="https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage">https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage</a></p><p>but we need 3 things:</p><ol><li><strong>PSM: </strong>Because this kind of captcha is a single “word”, we set “7” as value to trait the image as a single line.</li><li><strong>LANG:</strong> Tesseract has default trainning sets for different language, and because we we’re not reading special characters we set english “eng” as language.</li><li><strong>OPTIONS:</strong> We can set a lot of parameters to OCR, but let’s keep it simple, just set a whilelist for the characters we can expect from the image, in this case we need “abcdefghijklmnopqrstuvwxyz1234567890”.</li></ol><p>For options, we need to create a file with the parameters, and save it with the name you want in the tesseract config directory,</p><pre># /usr/share/tesseract-ocr/tessdata/config/captcha<br>tessedit_char_whitelist abcdefghijklmnopqrstuvwxyz1234567890</pre><p>And finally, lets try to solve the captcha through the OCR</p><pre>require &#39;rtesseract&#39;<br>solved_path =  &#39;captcha_solved.jpg&#39;<br>img.write solved_path</pre><pre>text = RTesseract.new(solved_path,<br>                      lang: :eng,<br>                      options: :captcha,<br>                      psm: 7)<br>text.to_s_without_spaces #  =&gt; &quot;16qe9o&quot;</pre><p>If we pass the original image to the OCR, returns a empty string because it couldn’t understand the text.</p><p>I created a repo with this example, and with a script to test our solution, and it has a 80% accuracy that it’s really useful, because if we cant solve any particular captcha, we can refresh and try again.</p><p><a href="https://github.com/JotaSe/solving-captcha">JotaSe/solving-captcha</a></p><h3>Conclusion</h3><p>There’re more ways to solve captcha, a smarter way it’s using Machine Learning, you can create a dataset of multiple types of captchas with different noises and use it to train and get better accuracy, but if you can’t do that, I hope this post can be useful for you.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=753895fade8a" width="1" height="1"><hr><p><a href="https://blog.5rabbits.com/breaking-captchas-from-scracth-almost-753895fade8a">Breaking captchas from scratch (almost)</a> was originally published in <a href="https://blog.5rabbits.com">5rabbits Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deciding like a robot. NOT! (Boolean Expression in Ruby)]]></title>
            <link>https://blog.5rabbits.com/deciding-like-a-robot-not-boolean-expression-in-ruby-96fc20e404c0?source=rss-64c23a1254a7------2</link>
            <guid isPermaLink="false">https://medium.com/p/96fc20e404c0</guid>
            <category><![CDATA[algorithms]]></category>
            <category><![CDATA[ruby]]></category>
            <category><![CDATA[metaprogramming]]></category>
            <category><![CDATA[programming]]></category>
            <dc:creator><![CDATA[Javier Segovia]]></dc:creator>
            <pubDate>Thu, 29 Sep 2016 17:16:53 GMT</pubDate>
            <atom:updated>2016-09-29T17:16:53.318Z</atom:updated>
            <content:encoded><![CDATA[<p>Sometimes we should create annoying “rules” to make decisions when we are coding things like this</p><pre>if foo &amp; bar &amp; a.eql?(&#39;foo&#39;) || foo_bar == bar || ... # and so on</pre><p>So to keep it “legible” we should do some improvements, like creating methods to re-use some statements or simply nesting statements to avoid long lines of code. But, if we think as a “machine”, we have to interpret “true” and “false” values (binary values 1,0)</p><p>Let’s see how a circuit works</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/945/1*7HOC9-rfp81zE_Ac0Iv3tg.png" /><figcaption><a href="http://www.upcrost.site/boolean-expression-to-logic-circuit/logic-gates-converting-nand-to-nor-boolean-expression-boolean-circuit-software-y0tdr/">http://www.upcrost.site/boolean-expression-to-logic-circuit/logic-gates-converting-nand-to-nor-boolean-expression-boolean-circuit-software-y0tdr/</a></figcaption></figure><p>We got 3 switches <strong>S</strong>, <strong>X</strong> and <strong>Y</strong>, and there’s a circuit to turn on a bulb, as a programmer we can see the <a href="https://en.wikipedia.org/wiki/Logic_gate"><strong>logics gates</strong></a><strong> </strong>as “If Statements” because, that’s what they are, a physical implementation of boolean functions, so our function is <strong>(S’X + SY)</strong></p><pre>If S &amp; !X || S &amp; Y<br> # Do stuff<br>end</pre><p>Not a big deal right?, but what if we have a lot of inputs and a lot of logics gates?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*15ZCaOYwvKjKt93_H1owww.gif" /></figure><p>Or even bigger?</p><p>So, let’s try to code that</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/6068329e227d8fa060c4377f3453bd9f/href">https://medium.com/media/6068329e227d8fa060c4377f3453bd9f/href</a></iframe><p>What about if we have the same input “<strong>switches</strong>” but different circuits for different outputs?, then we’ll have to code other <strong>circuit methods</strong> or <strong>if statements</strong></p><pre>def foo_circuit(s, x, y)<br>  # logic stuff<br>end</pre><pre>def bar_circuit(s, x, y)<br>  <br>end</pre><pre># ... Imagine if it&#39;s more complex...</pre><p>This can work for a lot of purposes, personally, I was thinking about how to create a To Do list as a decision tree, where every node can contain a decision tree as well, it would be a pain in the ass if we wanted to develop/maintain it</p><p>But, why don’t we use <a href="https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds"><strong>meta-programming</strong></a> to do this task? To avoid similar methods or block codes within the same types of input / output. That’s why I coded a little gem thinking about it, let’s take a look</p><p><a href="https://rubygems.org/gems/undecided">undecided | RubyGems.org | your community gem host</a></p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/95c992c7d9a2218bc2825614060133a2/href">https://medium.com/media/95c992c7d9a2218bc2825614060133a2/href</a></iframe><p>Easy right? OK maybe you’re thinking, it’s easier to do</p><pre>return (A &amp; B)</pre><p>Let’s create a TO DO class, that have an array of tasks and a name to identify them:</p><pre>class ToDo<br>  # A to do list should have an array of tasks<br>  attr_reader :tasks, :name</pre><pre># let’s define our tasks<br>  def initialize(name, tasks)<br>    <a href="http://twitter.com/name">@name</a> = name<br>    <a href="http://twitter.com/tasks">@tasks</a> = task<br>  end</pre><pre># o we can simply add more task to our array <br>  def add_task(task)<br>    <a href="http://twitter.com/tasks">@tasks</a> &lt;&lt; task<br>  end</pre><pre># Retrieve our task list as a hash<br>  def task_list<br>    <a href="http://twitter.com/tasks">@tasks</a>.map { |task| [task.name, task.completed] }.to_h<br>  end<br>end</pre><p>Now create a Task class that has two attributes, name and completed, which will behave like a hash with a Key (name) and a Value (completed)</p><pre>class Task<br>  attr_accessor :name, :completed</pre><pre>def initialize(name, completed)<br>    <a href="http://twitter.com/name">@name</a> = name<br>    <a href="http://twitter.com/completed">@completed</a> = completed<br>  end<br>end</pre><p>To evaluate rules and decisions, let’s create a class “Rule” that has a boolean expression and a <strong>to do</strong> model that will return if the evaluation is positive</p><pre>class Rule<br>  attr_reader :expression, :to_do</pre><pre>def initialize(expression, to_do)<br>    <a href="http://twitter.com/expression">@expression</a> = expression<br>    <a href="http://twitter.com/to_do">@to_do</a> = to_do<br>  end<br>end</pre><p>And finally, lets create a class called “Flow”, that will have the business logic to decide in which to do list we’re working</p><pre>class Flow<br>  attr_accessor :current_todo<br>  def initialize(rules)<br>    <a href="http://twitter.com/rules">@rules</a> = rules<br>    # initialize a decider class<br>    <a href="http://twitter.com/decider">@decider</a> = Undecided::Decider.new<br>  end</pre><pre>  def start(to_do)<br>    <a href="http://twitter.com/current_todo">@current_todo</a> = to_do.nil? ? next_to_do : to_do<br>  end</pre><pre># Iterate every rule to match the true one<br>  def next_to_do<br>    <a href="http://twitter.com/rules">@rules</a>.each do |rule| <br>      next if !next?(rule)<br>      <a href="http://twitter.com/current_todo">@current_todo</a> = rule.to_do<br>      break <br>    end<br>    # return the same if none of the rules are true<br>  end</pre><pre># check if the rule is met<br>  def next?(rule)<br>    <a href="http://twitter.com/decider">@decider</a>.decide(rule.expression, <a href="http://twitter.com/current_todo">@current_todo</a>.task_list,    false)<br>  end  <br>end</pre><p>To test it, let’s instance some classes</p><pre># let&#39;s define our clases</pre><pre># tasks<br>task_a =  Task.new(:a, false)<br>task_b =  Task.new(:b, true)<br>task_c =  Task.new(:c, false)<br>task_d =  Task.new(:d, true)<br>task_e =  Task.new(:e, false)</pre><pre># todos<br>todo_a = ToDo.new(&#39;todo_a&#39;, [task_a, task_d])<br>todo_b = ToDo.new(&#39;todo_b&#39;, [task_a, task_b, task_e])<br>todo_c = ToDo.new(&#39;todo_c&#39;, [task_c, task_d])<br>todo_d = ToDo.new(&#39;todo_d&#39;, [task_e, task_b])</pre><pre># rules<br>rules = [<br>  Rule.new(&#39;!a&amp;!b&#39;, todo_b),<br>  Rule.new(&#39;a&amp;b&amp;c!d|(d|c)&#39;, todo_c),<br>  Rule.new(&#39;!a&amp;!c&#39;, todo_d),<br>  Rule.new(&#39;b&amp;e&#39;, todo_b)<br>]</pre><pre># flow<br>flow = Flow.new(rules)</pre><p>Let’s start with “<strong>todo_a”</strong></p><pre>flow.start todo_a<br># #&lt;ToDo:0x00000001c61118 <a href="http://twitter.com/tasks">@tasks</a>=[#&lt;Task:0x00000001a2d9c8 <a href="http://twitter.com/name">@name</a>=:a, <a href="http://twitter.com/completed">@completed</a>=false&gt;, #&lt;Task:0x000000023d63f8 <a href="http://twitter.com/name">@name</a>=:d, <a href="http://twitter.com/completed">@completed</a>=true&gt;], <a href="http://twitter.com/name">@name</a>=&quot;todo_a&quot;&gt;</pre><p>Now let’s move to another to do list check that the first rule should be positive cuz “<strong>todo_a”</strong> doesn’t have a <strong>‘d’</strong> task, so it will be false, and the <strong>‘a’</strong> task is false</p><pre>flow.next_to_do<br>##&lt;ToDo:0x0000000215b7e0 <a href="http://twitter.com/tasks">@tasks</a>=[#&lt;Task:0x00000002265550 <a href="http://twitter.com/name">@name</a>=:a, <a href="http://twitter.com/completed">@completed</a>=false&gt;, #&lt;Task:0x00000002247b68 <a href="http://twitter.com/name">@name</a>=:b, <a href="http://twitter.com/completed">@completed</a>=true&gt;, #&lt;Task:0x000000021c4998 <a href="http://twitter.com/name">@name</a>=:e, <a href="http://twitter.com/completed">@completed</a>=false&gt;], <a href="http://twitter.com/name">@name</a>=&quot;todo_b&quot;&gt;</pre><p>If we check the new todo list</p><pre>flow.current_todo.name<br># ‘todo_b’</pre><p>So it works! the rule we evaluated was <strong>Rule.new(‘!a&amp;!b’, todo_b), </strong>then if <strong>!a&amp;!b </strong>with values <strong>a = false, d = false, </strong>and according to</p><pre># decide function has an default argument &#39;stric&#39; = true, to match the total values in the expression<br># if we want to avoid this, we simply pass it as false</pre><pre>expression = &#39;A&amp;B&amp;C&#39;<br>values = { A:1, B:1 }<br>decider.decide(expression, values)<br># Return false cuz A&amp;B&amp;C means that (A==true &amp; B==true &amp; C==true), but C is nil, then is false</pre><p>The evaluation is positive! and it will return the new to do list <strong>“todo_b”</strong></p><p>You can keep playing with the remaining values, but I wrote it randomly, so maybe not all of them matches the remaining todo list.</p><p>Here’s the whole code:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/867f7569f66e8e099932381bba5852ea/href">https://medium.com/media/867f7569f66e8e099932381bba5852ea/href</a></iframe><p>To evaluate these <strong>functions, </strong>I’m using <a href="https://github.com/JotaSe/undecided"><strong>eval</strong></a><strong> </strong>to perform the functions as a code block, but before you freak out, there’s a lot of validation to avoid malicious code injection.</p><p>Feel free to use, fork, rewrite, fix, or whatever you want the <a href="https://github.com/JotaSe/undecided"><strong>gem</strong></a>, I hope it can be useful for someone.</p><p><a href="https://github.com/JotaSe/undecided">JotaSe/undecided</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=96fc20e404c0" width="1" height="1"><hr><p><a href="https://blog.5rabbits.com/deciding-like-a-robot-not-boolean-expression-in-ruby-96fc20e404c0">Deciding like a robot. NOT! (Boolean Expression in Ruby)</a> was originally published in <a href="https://blog.5rabbits.com">5rabbits Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>